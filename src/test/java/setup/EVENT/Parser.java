package setup.EVENT;

import afs.nodes.event.EventCompositionNode;
import afs.nodes.event.EventDeclarationNode;
import afs.nodes.event.EventNode;
import afs.nodes.expr.*;

import java.util.ArrayList;
import java.util.List;

/* The required start of a Coco/R grammar file. "Program" specifies the starting symbol of the grammar. */


public class Parser {
	public static final int _EOF = 0;
	public static final int _INT = 1;
	public static final int _DOUBLE = 2;
	public static final int _STRING = 3;
	public static final int _IDENT = 4;
	public static final int maxT = 28;

	static final boolean _T = true;
	static final boolean _x = false;
	static final int minErrDist = 2;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;
	
	public Scanner scanner;
	public Errors errors;

	public EventNode mainNode = null; // This contains the AST generated by calling parser.Parse().

public boolean hasErrors() {
return errors.count > 0;
}

private EventNode toCompEvent(List<EventNode> eventsReversed) {
if (eventsReversed.isEmpty()) {
throw new RuntimeException("Empty events list");
}
EventNode left = eventsReversed.getFirst();

if (eventsReversed.size() == 1) {
return left;
} else {
int line = left.getLineNumber();
int col = left.getColumnNumber();
List<EventNode> rest = eventsReversed.subList(1, eventsReversed.size());
EventNode right = toCompEvent(rest);
return new EventCompositionNode(left, right, line, col);
}
}

private ExprNode makeUnOpExpr(List<Character> unaries, ExprNode base, int line, int col) {
ExprNode result = base;
int index = 0;
while (index < unaries.size()) {
char ch = unaries.get(index);
result = switch (ch) {
case '!' -> new ExprUnopNode(result, UnOp.NOT, line, col);
case '-' -> new ExprUnopNode(result, UnOp.NEG, line, col);
default -> throw new RuntimeException("Unknown unary operator: " + ch);
};
index++;
}
return result;
}

private ExprNode makeBinOpExpr(ExprNode left, String op, ExprNode right, int line, int column) {
return switch (op) {
case "*" -> new ExprBinopNode(left, BinOp.MUL, right, line, column);
case "/" -> new ExprBinopNode(left, BinOp.DIV, right, line, column);
case "+" -> new ExprBinopNode(left, BinOp.ADD, right, line, column);
case "-" -> new ExprBinopNode(left, BinOp.SUB, right, line, column);
case "++" -> new ExprBinopNode(left, BinOp.CONCAT, right, line, column);
case "<=" -> {  ExprNode equals = makeBinOpExpr(left, "==", right, line, column);
ExprNode lessThan = makeBinOpExpr(left, "<", right, line, column);
yield makeBinOpExpr(equals, "||", lessThan, line, column);
}
case ">=" -> {  ExprNode equals = makeBinOpExpr(left, "==", right, line, column);
ExprNode lessThan = makeBinOpExpr(left, ">", right, line, column);
yield makeBinOpExpr(equals, "||", lessThan, line, column);
}
case "<" -> new ExprBinopNode(left, BinOp.LT, right, line, column);
case ">" -> new ExprBinopNode(right, BinOp.LT, left, line, column);
case "==" -> new ExprBinopNode(left, BinOp.EQ, right, line, column);
case "!=" -> {  ExprNode equal = makeBinOpExpr(left, "==", right, line, column);
yield new ExprUnopNode(equal, UnOp.NOT, line, column);
}
case "&&" -> new ExprBinopNode(left, BinOp.AND, right, line, column);
case "||" -> {  ExprNode notLeftExpr = new ExprUnopNode(left, UnOp.NOT, line, column);
ExprNode notRightExpr = new ExprUnopNode(right, UnOp.NOT, line, column);
ExprNode andNode = makeBinOpExpr(notLeftExpr, "&&", notRightExpr, line, column);
yield new ExprUnopNode(andNode, UnOp.NOT, line, column);
}
default -> throw new RuntimeException("Unknown binary operator: " + op);
};
}

/*------------------------------------------------------------------------*/
/* The following section contains the token specification of AFS.*/


	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (String msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) {
				++errDist;
				break;
			}

			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	boolean StartOf (int s) {
		return set[s][la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}
	
	boolean WeakSeparator (int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) { Get(); return true; }
		else if (StartOf(repFol)) return false;
		else {
			SynErr(n);
			while (!(set[syFol][kind] || set[repFol][kind] || set[0][kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}
	
	void Program() {
		mainNode = Events();
	}

	EventNode  Events() {
		EventNode  event;
		List<EventNode> events = new ArrayList<>(); List<ExprNode> arguments = new ArrayList<>(); String ident, fname; 
		Expect(4);
		ident = t.val; 
		Expect(5);
		Expect(4);
		int line = t.line; int col = t.col; fname = t.val; 
		Expect(6);
		if (StartOf(1)) {
			ExprNode arg = Expr();
			arguments.add(arg); 
			while (la.kind == 7) {
				Get();
				arg = Expr();
				arguments.add(arg); 
			}
		}
		Expect(8);
		Expect(9);
		event = new EventDeclarationNode(ident, fname, arguments, line, col); events.add(event); 
		while (la.kind == 5) {
			line = t.line; col = t.col; arguments = new ArrayList<>(); 
			Get();
			Expect(4);
			line = t.line; col = t.col; ident = t.val; 
			Expect(6);
			if (StartOf(1)) {
				ExprNode arg = Expr();
				arguments.add(arg); 
				while (la.kind == 7) {
					Get();
					arg = Expr();
					arguments.add(arg); 
				}
			}
			Expect(8);
			Expect(9);
			event = new EventDeclarationNode(ident, fname, arguments, line, col); events.add(event); 
		}
		event = toCompEvent(events); 
		return event;
	}

	ExprNode  Expr() {
		ExprNode  expr;
		expr = AndExpr();
		while (la.kind == 10) {
			Get();
			String op = t.val; int line = t.line; int col = t.col; 
			ExprNode right = AndExpr();
			expr = makeBinOpExpr(expr, op, right, line, col); 
		}
		return expr;
	}

	ExprNode  AndExpr() {
		ExprNode  expr;
		expr = EqExpr();
		while (la.kind == 11) {
			Get();
			String op = t.val; int line = t.line; int col = t.col; 
			ExprNode right = EqExpr();
			expr = makeBinOpExpr(expr, op, right, line, col); 
		}
		return expr;
	}

	ExprNode  EqExpr() {
		ExprNode  expr;
		expr = RelExpr();
		while (la.kind == 12 || la.kind == 13) {
			if (la.kind == 12) {
				Get();
			} else {
				Get();
			}
			String op = t.val; int line = t.line; int col = t.col; 
			ExprNode right = RelExpr();
			expr = makeBinOpExpr(expr, op, right, line, col); 
		}
		return expr;
	}

	ExprNode  RelExpr() {
		ExprNode  expr;
		expr = ConcatExpr();
		while (StartOf(2)) {
			if (la.kind == 14) {
				Get();
			} else if (la.kind == 15) {
				Get();
			} else if (la.kind == 16) {
				Get();
			} else {
				Get();
			}
			String op = t.val; int line = t.line; int col = t.col; 
			ExprNode right = ConcatExpr();
			expr = makeBinOpExpr(expr, op, right, line, col); 
		}
		return expr;
	}

	ExprNode  ConcatExpr() {
		ExprNode  expr;
		expr = PlusExpr();
		while (la.kind == 18) {
			Get();
			String op = t.val; int line = t.line; int col = t.col; 
			ExprNode right = PlusExpr();
			expr = makeBinOpExpr(expr, op, right, line, col); 
		}
		return expr;
	}

	ExprNode  PlusExpr() {
		ExprNode  expr;
		expr = MultExpr();
		while (la.kind == 19 || la.kind == 20) {
			if (la.kind == 19) {
				Get();
			} else {
				Get();
			}
			String op = t.val; int line = t.line; int col = t.col; 
			ExprNode right = MultExpr();
			expr = makeBinOpExpr(expr, op, right, line, col); 
		}
		return expr;
	}

	ExprNode  MultExpr() {
		ExprNode  expr;
		expr = NotExpr();
		while (la.kind == 21 || la.kind == 22) {
			if (la.kind == 21) {
				Get();
			} else {
				Get();
			}
			String op = t.val; int line = t.line; int col = t.col; 
			ExprNode right = NotExpr();
			expr = makeBinOpExpr(expr, op, right, line, col); 
		}
		return expr;
	}

	ExprNode  NotExpr() {
		ExprNode  expr;
		List<Character> unaries = new ArrayList(); int line = -1; int col = -1; 
		while (la.kind == 20 || la.kind == 23) {
			if (la.kind == 23) {
				Get();
				unaries.add('!'); 
			} else {
				Get();
				unaries.add('-'); 
			}
			line = t.line; col = t.col; 
		}
		expr = Term();
		expr = makeUnOpExpr(unaries, expr, line, col);  
		return expr;
	}

	ExprNode  Term() {
		ExprNode  expr;
		expr = null; 
		switch (la.kind) {
		case 4: {
			Get();
			String ident = t.val; int line = t.line; int col = t.col; 
			expr = new ExprIdentifierNode(ident, line, col); 
			if (la.kind == 6 || la.kind == 26) {
				if (la.kind == 26) {
					expr = ExprListAccess(ident, line, col);
				} else {
					expr = ExprFuncCall(ident, line, col);
				}
			}
			break;
		}
		case 26: {
			expr = ExprListDeclaration();
			break;
		}
		case 1: {
			Get();
			expr = new ExprIntNode(t.val, t.line, t.col); 
			break;
		}
		case 2: {
			Get();
			expr = new ExprDoubleNode(t.val, t.line, t.col); 
			break;
		}
		case 3: {
			Get();
			expr = new ExprStringNode(t.val, t.line, t.col); 
			break;
		}
		case 24: case 25: {
			if (la.kind == 24) {
				Get();
			} else {
				Get();
			}
			expr = new ExprBoolNode(t.val, t.line, t.col); 
			break;
		}
		case 6: {
			Get();
			expr = Expr();
			Expect(8);
			break;
		}
		default: SynErr(29); break;
		}
		return expr;
	}

	ExprNode  ExprListAccess(String ident, int line, int col) {
		ExprNode  expr;
		List<ExprNode> exprList = new ArrayList<>(); 
		Expect(26);
		expr = Expr();
		exprList.add(expr); 
		Expect(27);
		while (la.kind == 26) {
			Get();
			expr = Expr();
			exprList.add(expr); 
			Expect(27);
		}
		expr = new ExprListAccessNode(ident, exprList, line, col); 
		return expr;
	}

	ExprFunctionCallNode  ExprFuncCall(String ident, int line, int col) {
		ExprFunctionCallNode  funcCall;
		List<ExprNode> exprList = new ArrayList<>(); 
		Expect(6);
		if (StartOf(1)) {
			ExprNode arg = Expr();
			exprList.add(arg); 
			while (la.kind == 7) {
				Get();
				arg = Expr();
				exprList.add(arg); 
			}
		}
		Expect(8);
		funcCall = new ExprFunctionCallNode(ident, exprList, line, col); 
		return funcCall;
	}

	ExprNode  ExprListDeclaration() {
		ExprNode  expr;
		List<ExprNode> exprs = new ArrayList<>(); 
		Expect(26);
		int line = t.line; int col = t.col; 
		if (StartOf(1)) {
			expr = Expr();
			exprs.add(expr); 
		}
		while (la.kind == 7) {
			Get();
			expr = Expr();
			exprs.add(expr); 
		}
		Expect(27);
		expr = new ExprListDeclaration(exprs, line, col); 
		return expr;
	}



	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
		Program();
		Expect(0);

		scanner.buffer.Close();
	}

	private static final boolean[][] set = {
		{_T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x},
		{_x,_T,_T,_T, _T,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_x,_x,_T, _T,_T,_T,_x, _x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x}

	};
} // end Parser


class Errors {
	public int count = 0;                                    // number of errors detected
	public java.io.PrintStream errorStream = System.out;     // error messages go to this stream
	public String errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text
	
	protected void printMsg(int line, int column, String msg) {
		StringBuffer b = new StringBuffer(errMsgFormat);
		int pos = b.indexOf("{0}");
		if (pos >= 0) { b.delete(pos, pos+3); b.insert(pos, line); }
		pos = b.indexOf("{1}");
		if (pos >= 0) { b.delete(pos, pos+3); b.insert(pos, column); }
		pos = b.indexOf("{2}");
		if (pos >= 0) b.replace(pos, pos+3, msg);
		errorStream.println(b.toString());
	}
	
	public void SynErr (int line, int col, int n) {
		String s;
		switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "INT expected"; break;
			case 2: s = "DOUBLE expected"; break;
			case 3: s = "STRING expected"; break;
			case 4: s = "IDENT expected"; break;
			case 5: s = "\"do\" expected"; break;
			case 6: s = "\"(\" expected"; break;
			case 7: s = "\",\" expected"; break;
			case 8: s = "\")\" expected"; break;
			case 9: s = "\";\" expected"; break;
			case 10: s = "\"||\" expected"; break;
			case 11: s = "\"&&\" expected"; break;
			case 12: s = "\"==\" expected"; break;
			case 13: s = "\"!=\" expected"; break;
			case 14: s = "\"<=\" expected"; break;
			case 15: s = "\"<\" expected"; break;
			case 16: s = "\">=\" expected"; break;
			case 17: s = "\">\" expected"; break;
			case 18: s = "\"++\" expected"; break;
			case 19: s = "\"+\" expected"; break;
			case 20: s = "\"-\" expected"; break;
			case 21: s = "\"*\" expected"; break;
			case 22: s = "\"/\" expected"; break;
			case 23: s = "\"!\" expected"; break;
			case 24: s = "\"true\" expected"; break;
			case 25: s = "\"false\" expected"; break;
			case 26: s = "\"[\" expected"; break;
			case 27: s = "\"]\" expected"; break;
			case 28: s = "??? expected"; break;
			case 29: s = "invalid Term"; break;
			default: s = "error " + n; break;
		}
		printMsg(line, col, s);
		count++;
	}

	public void SemErr (int line, int col, String s) {	
		printMsg(line, col, s);
		count++;
	}
	
	public void SemErr (String s) {
		errorStream.println(s);
		count++;
	}
	
	public void Warning (int line, int col, String s) {	
		printMsg(line, col, s);
	}
	
	public void Warning (String s) {
		errorStream.println(s);
	}
} // Errors


class FatalError extends RuntimeException {
	public static final long serialVersionUID = 1L;
	public FatalError(String s) { super(s); }
}

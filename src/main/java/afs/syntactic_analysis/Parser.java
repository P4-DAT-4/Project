package afs.syntactic_analysis;

import afs.nodes.def.*;
import afs.nodes.event.*;
import afs.nodes.expr.*;
import afs.nodes.prog.*;
import afs.nodes.stmt.*;
import afs.nodes.type.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;

/* The required start of a Coco/R grammar file. "Program" specifies the starting symbol of the grammar. */


public class Parser {
	public static final int _EOF = 0;
	public static final int _INT = 1;
	public static final int _DOUBLE = 2;
	public static final int _STRING = 3;
	public static final int _IDENT = 4;
	public static final int maxT = 56;

	static final boolean _T = true;
	static final boolean _x = false;
	static final int minErrDist = 2;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;
	
	public Scanner scanner;
	public Errors errors;

	public ProgNode mainNode = null; // This contains the AST generated by calling parser.Parse().

    public boolean hasErrors() {
        return errors.count > 0;
    }

    private EventNode toCompEvent(List<EventNode> eventsReversed) {
        if (eventsReversed.isEmpty()) {
            throw new RuntimeException("Empty events list");
        }
        EventNode left = eventsReversed.getFirst();

        if (eventsReversed.size() == 1) {
            return left;
        } else {
            int line = left.getLineNumber();
            int col = left.getColumnNumber();
            List<EventNode> rest = eventsReversed.subList(1, eventsReversed.size());
            EventNode right = toCompEvent(rest);
            return new EventCompositionNode(left, right, line, col);
        }
    }

    private StmtNode toCompStmt(List<StmtNode> stmtsReversed) {
        if (stmtsReversed.isEmpty()) {
            return new StmtSkipNode();
        }
        StmtNode left = stmtsReversed.getFirst();

        if (stmtsReversed.size() == 1) {
            if (left instanceof StmtDeclarationNode) {
                return new StmtBlockNode((StmtDeclarationNode)left, new StmtSkipNode(), left.getLineNumber(), left.getColumnNumber());
            } else {
                return left;
            }
        } else {
            int line = left.getLineNumber();
            int col = left.getColumnNumber();
            List<StmtNode> rest = stmtsReversed.subList(1, stmtsReversed.size());
            StmtNode right = toCompStmt(rest);
            if (left instanceof StmtDeclarationNode) {
                return new StmtBlockNode((StmtDeclarationNode)left, right, line, col);
            } else {
                return new StmtCompositionNode(left, right, line, col);
            }
        }
    }

    private ExprNode toCompListAccess(List<ExprNode> exprsReversed) {
        if (exprsReversed.isEmpty()) {
            throw new RuntimeException("Empty exprs list");
        }
        ExprNode left = exprsReversed.getFirst();

        if (exprsReversed.size() == 1) {
            return left;
        } else {
            int line = left.getLineNumber();
            int col = left.getColumnNumber();
            List<ExprNode> rest = exprsReversed.subList(1, exprsReversed.size());
            ExprNode right = toCompListAccess(rest);
            return new ExprListAccessNode(left, right, line, col);
        }
    }

    private ExprNode makeUnOpExpr(List<Character> unaries, ExprNode base, int line, int col) {
        ExprNode result = base;
        int index = 0;
        while (index < unaries.size()) {
            char ch = unaries.get(index);
            result = switch (ch) {
                case '!' -> new ExprUnopNode(result, UnOp.NOT, line, col);
                case '-' -> new ExprUnopNode(result, UnOp.NEG, line, col);
                default -> throw new RuntimeException("Unknown unary operator: " + ch);
            };
            index++;
        }
        return result;
    }

    private ExprNode makeBinOpExpr(ExprNode left, String op, ExprNode right, int line, int column) {
        return switch (op) {
            case "*" -> new ExprBinopNode(left, BinOp.MUL, right, line, column);
            case "/" -> new ExprBinopNode(left, BinOp.DIV, right, line, column);
            case "+" -> new ExprBinopNode(left, BinOp.ADD, right, line, column);
            case "-" -> new ExprBinopNode(left, BinOp.SUB, right, line, column);
            case "++" -> new ExprBinopNode(left, BinOp.CONCAT, right, line, column);
            case "<=" -> {  ExprNode equals = makeBinOpExpr(left, "==", right, line, column);
                            ExprNode lessThan = makeBinOpExpr(left, "<", right, line, column);
                            yield makeBinOpExpr(equals, "||", lessThan, line, column);
            }
            case ">=" -> {  ExprNode equals = makeBinOpExpr(left, "==", right, line, column);
                            ExprNode lessThan = makeBinOpExpr(left, ">", right, line, column);
                            yield makeBinOpExpr(equals, "||", lessThan, line, column);
            }
            case "<" -> new ExprBinopNode(left, BinOp.LT, right, line, column);
            case ">" -> new ExprBinopNode(right, BinOp.LT, left, line, column);
            case "==" -> new ExprBinopNode(left, BinOp.EQ, right, line, column);
            case "!=" -> {  ExprNode equal = makeBinOpExpr(left, "==", right, line, column);
                            yield new ExprUnopNode(equal, UnOp.NOT, line, column);
            }
            case "&&" -> new ExprBinopNode(left, BinOp.AND, right, line, column);
            case "||" -> {  ExprNode notLeftExpr = new ExprUnopNode(left, UnOp.NOT, line, column);
                            ExprNode notRightExpr = new ExprUnopNode(right, UnOp.NOT, line, column);
                            ExprNode andNode = makeBinOpExpr(notLeftExpr, "&&", notRightExpr, line, column);
                            yield new ExprUnopNode(andNode, UnOp.NOT, line, column);
            }
            default -> throw new RuntimeException("Unknown binary operator: " + op);
        };
    }

    private List<ExprNode> coordsToList(List<ExprListDeclaration> coords) {
        List<ExprNode> exprs = new ArrayList<>();
        for (ExprListDeclaration coord : coords) {
            exprs.addAll(coord.getExpressions());
        }
        return exprs;
    }
/*------------------------------------------------------------------------*/
/* The following section contains the token specification of AFS.*/


	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (String msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) {
				++errDist;
				break;
			}

			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	boolean StartOf (int s) {
		return set[s][la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}
	
	boolean WeakSeparator (int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) { Get(); return true; }
		else if (StartOf(repFol)) return false;
		else {
			SynErr(n);
			while (!(set[syFol][kind] || set[repFol][kind] || set[0][kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}
	
	void Program() {
		mainNode = Prog();
	}

	ProgNode  Prog() {
		ProgNode  prog;
		ArrayList<DefNode> defList = new ArrayList(); 
		while (StartOf(1)) {
			DefNode def = Def();
			defList.add(def); 
		}
		DefNode vis = Visualize();
		defList.add(vis); prog = new ProgNode(defList); 
		return prog;
	}

	DefNode  Def() {
		DefNode  def;
		def = null; 
		while (!(StartOf(2))) {SynErr(57); Get();}
		if (la.kind == 9) {
			def = FnDef();
		} else if (la.kind == 13) {
			def = ImgDef();
		} else if (StartOf(3)) {
			def = VarDef();
		} else SynErr(58);
		return def;
	}

	DefNode  Visualize() {
		DefNode  vis;
		Expect(5);
		int line = t.line; int col = t.col; 
		Expect(4);
		ExprIdentifierNode ident = new ExprIdentifierNode(t.val, line, col); 
		ExprFunctionCallNode funcCall = FuncCall(ident, line, col);
		Expect(6);
		EventNode event = Events();
		vis = new DefVisualizeNode(funcCall, event, line, col); 
		return vis;
	}

	ExprFunctionCallNode  FuncCall(ExprIdentifierNode ident, int line, int col) {
		ExprFunctionCallNode  funcCall;
		List<ExprNode> exprList = new ArrayList<>(); 
		Expect(10);
		if (StartOf(4)) {
			ExprNode arg1 = Expr();
			exprList.add(arg1); 
			while (la.kind == 11) {
				Get();
				ExprNode argX = Expr();
				exprList.add(argX); 
			}
		}
		Expect(12);
		funcCall = new ExprFunctionCallNode(ident, exprList, line, col); 
		return funcCall;
	}

	EventNode  Events() {
		EventNode  event;
		List<EventNode> events = new ArrayList<>(); 
		ExprNode expr = Expr();
		Expect(7);
		Expect(4);
		int line = t.line; int col = t.col; ExprIdentifierNode ident = new ExprIdentifierNode(t.val, t.line, t.col); 
		ExprFunctionCallNode funcCall = FuncCall(ident, line, col);
		events.add(new EventDeclarationNode(expr, funcCall, line, col)); 
		Expect(8);
		while (StartOf(4)) {
			expr = Expr();
			line = t.line; col = t.col; 
			Expect(7);
			Expect(4);
			line = t.line; col = t.col; ident = new ExprIdentifierNode(t.val, t.line, t.col); 
			funcCall = FuncCall(ident, line, col);
			events.add(new EventDeclarationNode(expr, funcCall, line, col)); 
			Expect(8);
		}
		event = toCompEvent(events); 
		return event;
	}

	ExprNode  Expr() {
		ExprNode  expr;
		expr = AndExpr();
		while (la.kind == 32) {
			Get();
			String op = t.val; int line = t.line; int col = t.col; 
			ExprNode right = AndExpr();
			expr = makeBinOpExpr(expr, op, right, line, col); 
		}
		return expr;
	}

	DefNode  FnDef() {
		DefNode  func;
		List<Param> params = new ArrayList<>(); 
		Expect(9);
		TypeNode type = Type();
		Expect(4);
		int line = t.line; int col = t.col; ExprIdentifierNode ident = new ExprIdentifierNode(t.val, line, col); 
		Expect(10);
		if (StartOf(3)) {
			Param param = Param();
			params.add(param); 
			while (la.kind == 11) {
				Get();
				param = Param();
				params.add(param); 
			}
		}
		Expect(12);
		StmtNode stmt = StmtBlock();
		func = new DefFunctionNode(type, ident, params, stmt, line, col); 
		return func;
	}

	DefNode  ImgDef() {
		DefNode  img;
		List<Param> params = new ArrayList<>(); 
		Expect(13);
		Expect(4);
		int line = t.line; int col = t.col; ExprIdentifierNode ident = new ExprIdentifierNode(t.val, line, col); 
		Expect(10);
		if (StartOf(3)) {
			Param param = Param();
			params.add(param); 
			while (la.kind == 11) {
				Get();
				param = Param();
				params.add(param); 
			}
		}
		Expect(12);
		StmtNode decl = DeclBlock();
		img = new DefFunctionNode(new TypeShapeNode(line, col), ident, params, decl, line, col); 
		return img;
	}

	DefNode  VarDef() {
		DefNode  def;
		TypeNode type = Type();
		Expect(4);
		int line = t.line; int col = t.col; ExprIdentifierNode ident = new ExprIdentifierNode(t.val, line, col); 
		Expect(14);
		ExprNode expr = Expr();
		def = new DefDeclarationNode(type, ident, expr, line, col); 
		Expect(8);
		return def;
	}

	TypeNode  Type() {
		TypeNode  type;
		type = null; 
		switch (la.kind) {
		case 51: {
			Get();
			type = new TypeIntNode(t.line, t.col); 
			break;
		}
		case 52: {
			Get();
			type = new TypeDoubleNode(t.line, t.col); 
			break;
		}
		case 53: {
			Get();
			type = new TypeDoubleNode(t.line, t.col); 
			break;
		}
		case 54: {
			Get();
			type = new TypeStringNode(t.line, t.col); 
			break;
		}
		case 55: {
			Get();
			type = new TypeVoidNode(t.line, t.col); 
			break;
		}
		case 48: {
			Get();
			TypeNode innerType = Type();
			Expect(49);
			type = new TypeListNode(innerType, t.line, t.col); 
			break;
		}
		default: SynErr(59); break;
		}
		return type;
	}

	Param  Param() {
		Param  param;
		TypeNode type = Type();
		Expect(4);
		int line = t.line; int col = t.col; ExprIdentifierNode ident = new ExprIdentifierNode(t.val, line, col); 
		param = new Param(type, ident, line, col); 
		return param;
	}

	StmtNode  StmtBlock() {
		StmtNode  stmt;
		List<StmtNode> stmts = new ArrayList<>(); 
		Expect(15);
		while (StartOf(5)) {
			StmtNode innerStmt = Stmt();
			stmts.add(innerStmt); 
		}
		Expect(16);
		stmt = toCompStmt(stmts); 
		return stmt;
	}

	StmtNode  DeclBlock() {
		StmtNode  stmt;
		List<StmtNode> decls = new ArrayList<>(); 
		Expect(15);
		while (StartOf(6)) {
			StmtNode decl = Decl();
			decls.add(decl); 
		}
		Expect(16);
		stmt = toCompStmt(decls); 
		return stmt;
	}

	StmtNode  Stmt() {
		StmtNode  stmt;
		stmt = new StmtSkipNode(); 
		if (StartOf(3)) {
			stmt = StmtDeclaration();
		} else if (la.kind == 17) {
			stmt = StmtIf();
		} else if (la.kind == 20) {
			stmt = StmtWhile();
		} else if (la.kind == 21) {
			stmt = StmtReturn();
		} else if (la.kind == 4) {
			Get();
			int line = t.line; int col = t.col; ExprIdentifierNode ident = new ExprIdentifierNode(t.val, t.line, t.col); 
			if (la.kind == 14) {
				stmt = StmtAssignment(ident, line, col);
			} else if (la.kind == 48) {
				stmt = StmtListAssignment(ident, line, col);
			} else if (la.kind == 10) {
				stmt = StmtFuncCall(ident, line, col);
			} else SynErr(60);
		} else SynErr(61);
		return stmt;
	}

	StmtNode  StmtDeclaration() {
		StmtNode  stmt;
		TypeNode type = Type();
		Expect(4);
		int line = t.line; int col = t.col; ExprIdentifierNode ident = new ExprIdentifierNode(t.val, t.line, t.col); 
		Expect(14);
		ExprNode expr = Expr();
		stmt = new StmtDeclarationNode(type, ident, expr, line, col); 
		Expect(8);
		return stmt;
	}

	StmtNode  StmtIf() {
		StmtNode  stmt;
		while (!(la.kind == 0 || la.kind == 17)) {SynErr(62); Get();}
		Expect(17);
		int line = t.line; int col = t.col; 
		Expect(10);
		ExprNode expr = Expr();
		Expect(12);
		Expect(18);
		StmtNode thenStmt = StmtBlock();
		stmt = new StmtIfNode(expr, thenStmt, new StmtSkipNode(), line, col); 
		if (la.kind == 19) {
			Get();
			StmtNode elseStmt = StmtBlock();
			stmt = new StmtIfNode(expr, thenStmt, elseStmt, line, col); 
		}
		return stmt;
	}

	StmtNode  StmtWhile() {
		StmtNode  stmt;
		while (!(la.kind == 0 || la.kind == 20)) {SynErr(63); Get();}
		Expect(20);
		int line = t.line; int col = t.col; 
		Expect(10);
		ExprNode expr = Expr();
		Expect(12);
		Expect(7);
		StmtNode whlStmt = StmtBlock();
		stmt = new StmtWhileNode(expr, whlStmt, line, col); 
		return stmt;
	}

	StmtNode  StmtReturn() {
		StmtNode  stmt;
		Expect(21);
		int line = t.line; int col = t.col; 
		ExprNode expr = Expr();
		stmt = new StmtReturnNode(expr, line, col); 
		Expect(8);
		return stmt;
	}

	StmtNode  StmtAssignment(ExprIdentifierNode ident, int line, int col) {
		StmtNode  stmt;
		Expect(14);
		ExprNode expr = Expr();
		stmt = new StmtAssignmentNode(ident, expr, line, col); 
		Expect(8);
		return stmt;
	}

	StmtNode  StmtListAssignment(ExprIdentifierNode ident, int line, int col) {
		StmtNode  stmt;
		ExprNode leftExpr = ExprListAccess(ident);
		Expect(14);
		ExprNode rightExpr = Expr();
		stmt = new StmtAssignmentNode(leftExpr, rightExpr, line, col); 
		Expect(8);
		return stmt;
	}

	StmtNode  StmtFuncCall(ExprIdentifierNode ident, int line, int col) {
		StmtNode  stmt;
		ExprFunctionCallNode funcCall = FuncCall(ident, line, col);
		Expect(8);
		stmt = new StmtFunctionCallNode(funcCall, t.line, t.col); 
		return stmt;
	}

	ExprNode  ExprListAccess(ExprIdentifierNode ident) {
		ExprNode  expr;
		List<ExprNode> exprList = new ArrayList<>(); exprList.add(ident); 
		Expect(48);
		ExprNode firstLa = Expr();
		exprList.add(firstLa); 
		Expect(49);
		while (la.kind == 48) {
			Get();
			ExprNode extraLa = Expr();
			exprList.add(extraLa); 
			Expect(49);
		}
		expr = toCompListAccess(exprList); 
		return expr;
	}

	StmtNode  Decl() {
		StmtNode  decl;
		decl = new StmtSkipNode(); 
		if (StartOf(7)) {
			decl = DeclDecl();
		} else if (la.kind == 17) {
			decl = DeclIf();
		} else SynErr(64);
		return decl;
	}

	StmtNode  DeclDecl() {
		StmtNode  decl;
		TypeNode type = DeclType();
		Expect(4);
		int line = t.line; int col = t.col; ExprIdentifierNode ident = new ExprIdentifierNode(t.val, t.line, t.col); 
		Expect(14);
		ExprNode declExpr = DeclExpr();
		decl = new StmtDeclarationNode(type, ident, declExpr, line, col); 
		Expect(8);
		return decl;
	}

	StmtNode  DeclIf() {
		StmtNode  decl;
		while (!(la.kind == 0 || la.kind == 17)) {SynErr(65); Get();}
		Expect(17);
		int line = t.line; int col = t.col; 
		Expect(10);
		ExprNode expr = Expr();
		Expect(12);
		Expect(18);
		StmtNode thenDecl = DeclBlock();
		decl = new StmtIfNode(expr, thenDecl, new StmtSkipNode(), line, col); 
		if (la.kind == 19) {
			Get();
			StmtNode elseDecl = DeclBlock();
			decl = new StmtIfNode(expr, thenDecl, elseDecl, line, col); 
		}
		return decl;
	}

	TypeNode  DeclType() {
		TypeNode  type;
		type = null; 
		if (la.kind == 50) {
			Get();
			type = new TypeShapeNode(t.line, t.col); 
		} else if (StartOf(3)) {
			type = Type();
		} else SynErr(66);
		return type;
	}

	ExprNode  DeclExpr() {
		ExprNode  declExpr;
		declExpr = null; 
		switch (la.kind) {
		case 22: {
			declExpr = Text();
			break;
		}
		case 23: {
			declExpr = Line();
			break;
		}
		case 25: {
			declExpr = Curve();
			break;
		}
		case 26: {
			declExpr = Place();
			break;
		}
		case 28: {
			declExpr = Scale();
			break;
		}
		case 30: {
			declExpr = Rotate();
			break;
		}
		case 1: case 2: case 3: case 4: case 10: case 42: case 45: case 46: case 47: case 48: {
			declExpr = Expr();
			break;
		}
		default: SynErr(67); break;
		}
		return declExpr;
	}

	ExprNode  Text() {
		ExprNode  declExpr;
		Expect(22);
		int line = t.line; int col = t.col; 
		ExprNode expr = Expr();
		declExpr = new ExprTextNode(expr, line, col); 
		return declExpr;
	}

	ExprNode  Line() {
		ExprNode  declExpr;
		List<ExprListDeclaration> coords = new ArrayList<>(); 
		Expect(23);
		int line = t.line; int col = t.col; 
		ExprListDeclaration firstCoord = Coord();
		coords.add(firstCoord); 
		Expect(24);
		ExprListDeclaration secondCoord = Coord();
		coords.add(secondCoord); 
		while (la.kind == 24) {
			Get();
			ExprListDeclaration extraCoords = Coord();
			coords.add(extraCoords); 
		}
		List<ExprNode> exprs = coordsToList(coords); declExpr = new ExprLineNode(exprs, line, col); 
		return declExpr;
	}

	ExprNode  Curve() {
		ExprNode  declExpr;
		List<ExprListDeclaration> coords = new ArrayList<>(); 
		Expect(25);
		int line = t.line; int col = t.col; 
		ExprListDeclaration firstCoord = Coord();
		coords.add(firstCoord); 
		Expect(24);
		ExprListDeclaration secondCoord = Coord();
		coords.add(secondCoord); 
		while (la.kind == 24) {
			Get();
			ExprListDeclaration extraCoords = Coord();
			coords.add(extraCoords); 
		}
		List<ExprNode> exprs = coordsToList(coords); declExpr = new ExprCurveNode(exprs, line, col); 
		return declExpr;
	}

	ExprNode  Place() {
		ExprNode  declExpr;
		Expect(26);
		int line = t.line; int col = t.col; 
		ExprNode lExpr = Expr();
		Expect(27);
		ExprNode rExpr = Coord();
		declExpr = new ExprPlaceNode(lExpr, rExpr, line, col); 
		return declExpr;
	}

	ExprNode  Scale() {
		ExprNode  declExpr;
		Expect(28);
		int line = t.line; int col = t.col; 
		ExprNode lExpr = Expr();
		Expect(29);
		ExprNode rExpr = Expr();
		declExpr = new ExprScaleNode(lExpr, rExpr, line, col); 
		return declExpr;
	}

	ExprNode  Rotate() {
		ExprNode  declExpr;
		Expect(30);
		int line = t.line; int col = t.col; 
		ExprNode lExpr = Expr();
		Expect(31);
		ExprNode mExpr = Expr();
		Expect(29);
		ExprNode rExpr = Expr();
		declExpr = new ExprRotateNode(lExpr, mExpr, rExpr, line, col); 
		return declExpr;
	}

	ExprListDeclaration  Coord() {
		ExprListDeclaration  coord;
		List<ExprNode> coords = new ArrayList<>(); 
		Expect(10);
		ExprNode x = Expr();
		coords.add(x); 
		Expect(11);
		ExprNode y = Expr();
		coords.add(y); 
		Expect(12);
		coord = new ExprListDeclaration(coords, t.line, t.col); 
		return coord;
	}

	ExprNode  AndExpr() {
		ExprNode  expr;
		expr = EqExpr();
		while (la.kind == 33) {
			Get();
			String op = t.val; int line = t.line; int col = t.col; 
			ExprNode right = EqExpr();
			expr = makeBinOpExpr(expr, op, right, line, col); 
		}
		return expr;
	}

	ExprNode  EqExpr() {
		ExprNode  expr;
		expr = RelExpr();
		while (la.kind == 34 || la.kind == 35) {
			if (la.kind == 34) {
				Get();
			} else {
				Get();
			}
			String op = t.val; int line = t.line; int col = t.col; 
			ExprNode right = RelExpr();
			expr = makeBinOpExpr(expr, op, right, line, col); 
		}
		return expr;
	}

	ExprNode  RelExpr() {
		ExprNode  expr;
		expr = ConcatExpr();
		while (StartOf(8)) {
			if (la.kind == 36) {
				Get();
			} else if (la.kind == 37) {
				Get();
			} else if (la.kind == 38) {
				Get();
			} else {
				Get();
			}
			String op = t.val; int line = t.line; int col = t.col; 
			ExprNode right = ConcatExpr();
			expr = makeBinOpExpr(expr, op, right, line, col); 
		}
		return expr;
	}

	ExprNode  ConcatExpr() {
		ExprNode  expr;
		expr = PlusExpr();
		while (la.kind == 40) {
			Get();
			String op = t.val; int line = t.line; int col = t.col; 
			ExprNode right = PlusExpr();
			expr = makeBinOpExpr(expr, op, right, line, col); 
		}
		return expr;
	}

	ExprNode  PlusExpr() {
		ExprNode  expr;
		expr = MultExpr();
		while (la.kind == 41 || la.kind == 42) {
			if (la.kind == 41) {
				Get();
			} else {
				Get();
			}
			String op = t.val; int line = t.line; int col = t.col; 
			ExprNode right = MultExpr();
			expr = makeBinOpExpr(expr, op, right, line, col); 
		}
		return expr;
	}

	ExprNode  MultExpr() {
		ExprNode  expr;
		expr = NotExpr();
		while (la.kind == 43 || la.kind == 44) {
			if (la.kind == 43) {
				Get();
			} else {
				Get();
			}
			String op = t.val; int line = t.line; int col = t.col; 
			ExprNode right = NotExpr();
			expr = makeBinOpExpr(expr, op, right, line, col); 
		}
		return expr;
	}

	ExprNode  NotExpr() {
		ExprNode  expr;
		List<Character> unaries = new ArrayList(); int line = -1; int col = -1; 
		while (la.kind == 42 || la.kind == 45) {
			if (la.kind == 45) {
				Get();
				unaries.add('!'); 
			} else {
				Get();
				unaries.add('-'); 
			}
			line = t.line; col = t.col; 
		}
		expr = Term();
		expr = makeUnOpExpr(unaries, expr, line, col);  
		return expr;
	}

	ExprNode  Term() {
		ExprNode  expr;
		expr = null; 
		switch (la.kind) {
		case 4: {
			Get();
			ExprIdentifierNode ident = new ExprIdentifierNode(t.val, t.line, t.col); 
			expr = ident; 
			if (la.kind == 10 || la.kind == 48) {
				if (la.kind == 48) {
					expr = ExprListAccess(ident);
				} else {
					expr = FuncCall(ident, t.line, t.col);
				}
			}
			break;
		}
		case 48: {
			expr = ExprListDeclaration();
			break;
		}
		case 1: {
			Get();
			expr = new ExprIntNode(t.val, t.line, t.col); 
			break;
		}
		case 2: {
			Get();
			expr = new ExprDoubleNode(t.val, t.line, t.col); 
			break;
		}
		case 3: {
			Get();
			expr = new ExprStringNode(t.val, t.line, t.col); 
			break;
		}
		case 46: case 47: {
			if (la.kind == 46) {
				Get();
			} else {
				Get();
			}
			expr = new ExprBoolNode(t.val, t.line, t.col); 
			break;
		}
		case 10: {
			Get();
			expr = Expr();
			Expect(12);
			break;
		}
		default: SynErr(68); break;
		}
		return expr;
	}

	ExprNode  ExprListDeclaration() {
		ExprNode  expr;
		List<ExprNode> exprs = new ArrayList<>(); 
		Expect(48);
		int line = t.line; int col = t.col; 
		if (StartOf(4)) {
			expr = Expr();
			exprs.add(expr); 
		}
		while (la.kind == 11) {
			Get();
			expr = Expr();
			exprs.add(expr); 
		}
		Expect(49);
		expr = new ExprListDeclaration(exprs, line, col); 
		return expr;
	}



	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
		Program();
		Expect(0);

		scanner.buffer.Close();
	}

	private static final boolean[][] set = {
		{_T,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_T,_x,_x, _x,_T,_x,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_x,_x,_T, _T,_T,_T,_T, _x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_x,_x,_T, _T,_T,_T,_T, _x,_x},
		{_T,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_x,_x,_T, _T,_T,_T,_T, _x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_x,_x,_T, _T,_T,_T,_T, _x,_x},
		{_x,_T,_T,_T, _T,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x},
		{_x,_x,_x,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_x,_x,_T, _T,_T,_T,_T, _x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_x,_T,_T, _T,_T,_T,_T, _x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_x,_T,_T, _T,_T,_T,_T, _x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_T,_T, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x}

	};
} // end Parser


class Errors {
	public int count = 0;                                    // number of errors detected
	public java.io.PrintStream errorStream = System.out;     // error messages go to this stream
	public String errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text
	
	protected void printMsg(int line, int column, String msg) {
		StringBuffer b = new StringBuffer(errMsgFormat);
		int pos = b.indexOf("{0}");
		if (pos >= 0) { b.delete(pos, pos+3); b.insert(pos, line); }
		pos = b.indexOf("{1}");
		if (pos >= 0) { b.delete(pos, pos+3); b.insert(pos, column); }
		pos = b.indexOf("{2}");
		if (pos >= 0) b.replace(pos, pos+3, msg);
		errorStream.println(b.toString());
	}
	
	public void SynErr (int line, int col, int n) {
		String s;
		switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "INT expected"; break;
			case 2: s = "DOUBLE expected"; break;
			case 3: s = "STRING expected"; break;
			case 4: s = "IDENT expected"; break;
			case 5: s = "\"visualize\" expected"; break;
			case 6: s = "\":\" expected"; break;
			case 7: s = "\"do\" expected"; break;
			case 8: s = "\";\" expected"; break;
			case 9: s = "\"fn\" expected"; break;
			case 10: s = "\"(\" expected"; break;
			case 11: s = "\",\" expected"; break;
			case 12: s = "\")\" expected"; break;
			case 13: s = "\"img\" expected"; break;
			case 14: s = "\"=\" expected"; break;
			case 15: s = "\"{\" expected"; break;
			case 16: s = "\"}\" expected"; break;
			case 17: s = "\"if\" expected"; break;
			case 18: s = "\"then\" expected"; break;
			case 19: s = "\"else\" expected"; break;
			case 20: s = "\"while\" expected"; break;
			case 21: s = "\"return\" expected"; break;
			case 22: s = "\"text\" expected"; break;
			case 23: s = "\"line\" expected"; break;
			case 24: s = "\"to\" expected"; break;
			case 25: s = "\"curve\" expected"; break;
			case 26: s = "\"place\" expected"; break;
			case 27: s = "\"at\" expected"; break;
			case 28: s = "\"scale\" expected"; break;
			case 29: s = "\"by\" expected"; break;
			case 30: s = "\"rotate\" expected"; break;
			case 31: s = "\"around\" expected"; break;
			case 32: s = "\"||\" expected"; break;
			case 33: s = "\"&&\" expected"; break;
			case 34: s = "\"==\" expected"; break;
			case 35: s = "\"!=\" expected"; break;
			case 36: s = "\"<=\" expected"; break;
			case 37: s = "\"<\" expected"; break;
			case 38: s = "\">=\" expected"; break;
			case 39: s = "\">\" expected"; break;
			case 40: s = "\"++\" expected"; break;
			case 41: s = "\"+\" expected"; break;
			case 42: s = "\"-\" expected"; break;
			case 43: s = "\"*\" expected"; break;
			case 44: s = "\"/\" expected"; break;
			case 45: s = "\"!\" expected"; break;
			case 46: s = "\"true\" expected"; break;
			case 47: s = "\"false\" expected"; break;
			case 48: s = "\"[\" expected"; break;
			case 49: s = "\"]\" expected"; break;
			case 50: s = "\"shape\" expected"; break;
			case 51: s = "\"int\" expected"; break;
			case 52: s = "\"double\" expected"; break;
			case 53: s = "\"bool\" expected"; break;
			case 54: s = "\"string\" expected"; break;
			case 55: s = "\"void\" expected"; break;
			case 56: s = "??? expected"; break;
			case 57: s = "this symbol not expected in Def"; break;
			case 58: s = "invalid Def"; break;
			case 59: s = "invalid Type"; break;
			case 60: s = "invalid Stmt"; break;
			case 61: s = "invalid Stmt"; break;
			case 62: s = "this symbol not expected in StmtIf"; break;
			case 63: s = "this symbol not expected in StmtWhile"; break;
			case 64: s = "invalid Decl"; break;
			case 65: s = "this symbol not expected in DeclIf"; break;
			case 66: s = "invalid DeclType"; break;
			case 67: s = "invalid DeclExpr"; break;
			case 68: s = "invalid Term"; break;
			default: s = "error " + n; break;
		}
		printMsg(line, col, s);
		count++;
	}

	public void SemErr (int line, int col, String s) {	
		printMsg(line, col, s);
		count++;
	}
	
	public void SemErr (String s) {
		errorStream.println(s);
		count++;
	}
	
	public void Warning (int line, int col, String s) {	
		printMsg(line, col, s);
	}
	
	public void Warning (String s) {
		errorStream.println(s);
	}
} // Errors


class FatalError extends RuntimeException {
	public static final long serialVersionUID = 1L;
	public FatalError(String s) { super(s); }
}

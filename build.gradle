plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

application {
    mainClass = 'afs.Main'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jar {
    enabled = false
}

build {
    dependsOn shadowJar
}

shadowJar {
    archiveFileName.set('AFS.jar')
    destinationDirectory.set(layout.projectDirectory)
}

tasks.register('GenerateParserScanner', Exec) {
    workingDir = file('CocoR')
    def os = org.gradle.internal.os.OperatingSystem.current()

    if (os.isWindows()) {
        commandLine 'cmd', '/c', 'cocoR.bat && powershell -ExecutionPolicy Bypass -File genTestParsers.ps1'
    } else if (os.isMacOsX() || os.isUnix()) {
        commandLine 'bash', '-c', './cocoR.sh && ./genTestParsers.sh'
    } else {
        throw new GradleException("Unsupported OS")
    }

    inputs.file("CocoR/AFS.atg")
    outputs.file("src/main/java/afs/syntactic_analysis/Parser.java")
    outputs.file("src/main/java/afs/syntactic_analysis/Scanner.java")
}

tasks.register("runAFS", Exec) {
    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        commandLine 'cmd', '/c', 'afs.bat'
    } else if (os.isMacOsX() || os.isUnix()) {
        commandLine 'bash', './afs.sh'  // macOS/Linux bash script
    } else {
        throw new GradleException("Unsupported OS")
    }
}

tasks.named('compileJava') {
    dependsOn tasks.named('GenerateParserScanner')
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    implementation 'org.javatuples:javatuples:1.2'
    implementation("org.jfree:jfreesvg:3.4.3")
}

test {
    onlyIf {
        gradle.startParameter.taskNames.contains("test")
    }
    useJUnitPlatform()
    include '**/*Test.class'
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }
}
